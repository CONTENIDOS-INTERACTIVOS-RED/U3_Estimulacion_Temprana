{"remainingRequest":"/home/runner/work/U3_Estimulacion_Temprana/U3_Estimulacion_Temprana/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Estimulacion_Temprana/U3_Estimulacion_Temprana/src/views/curso/Tema2.vue?vue&type=template&id=e26ed450&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Estimulacion_Temprana/U3_Estimulacion_Temprana/src/views/curso/Tema2.vue","mtime":1747361660099},{"path":"/home/runner/work/U3_Estimulacion_Temprana/U3_Estimulacion_Temprana/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Estimulacion_Temprana/U3_Estimulacion_Temprana/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Estimulacion_Temprana/U3_Estimulacion_Temprana/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Estimulacion_Temprana/U3_Estimulacion_Temprana/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Estimulacion_Temprana/U3_Estimulacion_Temprana/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubyg6c3ViVGl0dWxvPSInMi4gRXZhbHVhY2nDs24geSBzZWd1aW1pZW50byBkZWwgZGVzYXJyb2xsbyBpbmZhbnRpbCciKQogIC5jb250YWluZXIudGFyamV0YS50YXJqZXRhLS1ibGFuY2EucC00LnAtbWQtNS5vdmVyZmxvdy1oaWRkZW4KCiAgICAucm93Lm1iLTUKICAgICAgLmNvbC1sZy00Lm1iLTMubWItbGctMAogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvMS5wbmciLCBkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgIC5jb2wtbGctOAogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctMTIuYmctY29sb3ItMTIKICAgICAgICAgICAgZGl2LnAtNAogICAgICAgICAgICAgIHAubWItMCBTZWfDum4gQW1hciAoMjAwNCksIGVsIGRlc2Fycm9sbG8gaW5mYW50aWwgZXMgdW4gcHJvY2VzbyBkaW7DoW1pY28gcXVlIHJlcXVpZXJlIG5vIHNvbG8gZXN0cmF0ZWdpYXMgZGUgZXN0aW11bGFjacOzbiBhZGVjdWFkYXMsIHNpbm8gdGFtYmnDqW4gdW5hIGV2YWx1YWNpw7NuIGNvbnN0YW50ZSBxdWUgcGVybWl0YSBjb25vY2VyIGVsIHByb2dyZXNvIGRlIGNhZGEgbmnDsW8geSByZWFsaXphciBsb3MgYWp1c3RlcyBuZWNlc2FyaW9zIGVuIHN1IGFwcmVuZGl6YWplLiBMYSBvYnNlcnZhY2nDs24sIGVsIGFuw6FsaXNpcyB5IGVsIHNlZ3VpbWllbnRvIGNvbnRpbnVvIHNvbiBoZXJyYW1pZW50YXMgY2xhdmVzIHBhcmEgZ2FyYW50aXphciBxdWUgY2FkYSBuacOxbyByZWNpYmEgZWwgYXBveW8gYWRlY3VhZG8sIHNlZ8O6biBzdXMgbmVjZXNpZGFkZXMgeSBwb3RlbmNpYWxpZGFkZXMuICAKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyLm1iLTQKICAgICAgICAgIC5jb2wtbGctMTIuYmctY29sb3ItMS5wLTQKICAgICAgICAgICAgICBwLm1iLTAgRW4gZXN0ZSBzZW50aWRvLCBsYSBldmFsdWFjacOzbiB5IGVsIHNlZ3VpbWllbnRvIGRlbCBkZXNhcnJvbGxvIGluZmFudGlsIG5vIHNvbG8gcGVybWl0ZW4gdmFsb3JhciBsb3MgYXZhbmNlcywgc2lubyBxdWUgdGFtYmnDqW4gZmF2b3JlY2VuIGxhIHRvbWEgZGUgZGVjaXNpb25lcyBwZWRhZ8OzZ2ljYXMgaW5mb3JtYWRhcywgcHJvbW92aWVuZG8gdW5hIGVkdWNhY2nDs24gbcOhcyBpbmNsdXNpdmEgeSBlZmVjdGl2YS4KICAgICAgICAKICAgICAgICBoNSBMbyBpbnZpdGFtb3MgYSBhZGVudHJhcnNlIGVuIGVzdGUgdGVtYSBmdW5kYW1lbnRhbCB5IGEgZXhwbG9yYXIgY8OzbW8gZXN0b3MgcHJvY2Vzb3MgY29udHJpYnV5ZW4gYSBwb3RlbmNpYXIgZWwgYXByZW5kaXphamUgeSBlbCBiaWVuZXN0YXIgZGUgbG9zIG5pw7Fvcy4KICAgICAgICAgICAgICAgIAoKICAgICN0XzJfMS50aXR1bG8tc2VndW5kbyhkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIGgyICNbc3BhbiAyLjFdIE3DqXRvZG9zIHkgaGVycmFtaWVudGFzIHBhcmEgZXZhbHVhciBlbCBkZXNhcnJvbGxvIGluZmFudGlsCiAgICAKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWNvbG9yLTYubWItNQogICAgICAucC00LnAtbWQtNQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWVuZC5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctNS5vcmRlci0yCiAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzIuc3ZnIiwgZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAgICAgLmNvbC1sZy02Lm9yZGVyLTEKICAgICAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItNC50ZXh0LXdoaXRlIFBhcmEgY29ub2NlciBzb2JyZSBlc3RhIHRlbcOhdGljYSwgbG8gaW52aXRhbW9zIGEgZXNjdWNoYXIgZWwgc2lndWllbnRlIHBvZGNhc3QuCiAgICAKICAgICAgICAgICAgVGFyamV0YUF1ZGlvLmNvbG9yLWFjZW50by1ib3RvbmVzLmJnLWNvbG9yLXdoaXRlLm1iLTMoCiAgICAgICAgICAgICAgdGV4dG89Ik3DqXRvZG9zIHkgaGVycmFtaWVudGFzIHBhcmEgZXZhbHVhciBlbCBkZXNhcnJvbGxvIGluZmFudGlsIgogICAgICAgICAgICAgIHRpZW1wbwogICAgICAgICAgICAgIDphdWRpbz0icmVxdWlyZSgnLi4vLi4vYXNzZXRzL2N1cnNvL3BvZGNhc3QvcG9kY2FzdDEubXAzJykiCiAgICAgICAgICAgICkKCiAgICAjdF8yXzIudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICBoMiAjW3NwYW4gMi4yXSBJbmRpY2Fkb3JlcyBkZSBhdmFuY2UgZW4gw6FyZWFzIGNvZ25pdGl2YXMsIG1vdG9yYXMsIGxpbmfDvMOtc3RpY2FzIHkgc29jaWFsZXMKICAgIAogICAgLnJvdy5tYi01CiAgICAgIC5jb2wtbGctNC5tYi0zLm1iLWxnLTAKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzMucG5nIiwgZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAuY29sLWxnLTgKICAgICAgICBoNS5tYi00IMK/Q8OzbW8gc2UgcHVlZGUgcmVjb25vY2VyIHNpIHVuIG5pw7FvIGVzdMOhIGF2YW56YW5kbyBhZGVjdWFkYW1lbnRlIGVuIHN1IGRlc2Fycm9sbG8/CiAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgRWwgY3JlY2ltaWVudG8gaW5mYW50aWwgbm8gZXMgdW4gcHJvY2VzbyB1bmlmb3JtZSwgc2lubyB1biBjYW1pbm8gbGxlbm8gZGUgZGVzY3VicmltaWVudG9zIHkgYXByZW5kaXphamVzIHF1ZSB2YXLDrWFuIGRlIHVuIG5pw7FvIGEgb3Ryby4gUGFyYSBjb21wcmVuZGVyIHN1IGV2b2x1Y2nDs24sIGVzIGZ1bmRhbWVudGFsIGNvbnRhciBjb24gaW5kaWNhZG9yZXMgZGUgYXZhbmNlIGVuIGRpZmVyZW50ZXMgw6FyZWFzIGRlbCBkZXNhcnJvbGxvLiBFc3RvcyBpbmRpY2Fkb3JlcyBwZXJtaXRlbiBpZGVudGlmaWNhciBmb3J0YWxlemFzLCBkaWZpY3VsdGFkZXMgeSBuZWNlc2lkYWRlcyBlc3BlY8OtZmljYXMsIGZhY2lsaXRhbmRvIGxhIGltcGxlbWVudGFjacOzbiBkZSBlc3RyYXRlZ2lhcyBkZSBlc3RpbXVsYWNpw7NuIGFkZWN1YWRhcwogICAgCiAgICAgICAgLmJnLWNvbG9yLTcucC00KGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1zdGFydAogICAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi80LnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvCiAgICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgICBwLm1iLTAgQ2FkYSDDoXJlYSBkZWwgZGVzYXJyb2xsbywgY29nbml0aXZhLCBtb3RvcmEsIGxpbmfDvMOtc3RpY2EgeSBzb2NpYWwsIGRlc2VtcGXDsWEgdW4gcGFwZWwgY2xhdmUgZW4gbGEgZm9ybWFjacOzbiBpbnRlZ3JhbCBkZWwgbmnDsW8uIFBvciBlbGxvLCBlcyBpbXBvcnRhbnRlIGFuYWxpemFyIGPDs21vIGludGVyYWN0w7phbiBlbnRyZSBzw60geSBxdcOpIHNlw7FhbGVzIGluZGljYW4gcXVlIHVuIG5pw7FvIGVzdMOhIHByb2dyZXNhbmRvIGRlIG1hbmVyYSBhZGVjdWFkYS4KCiAgICAuYmctZnVsbC13aWR0aC5iZy1mb25kby1zbGlkZXIKICAgICAgLnAtNC5wLW1kLTUKICAgICAgICBTbHlkZXJBKHRpcG89ImIiKS5iZy13aGl0ZQogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIucC00LnAtbWQtNQogICAgICAgICAgICAuY29sLWxnLTUub3JkZXItMgogICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvNS5wbmciKQogICAgICAgICAgICAuY29sLWxnLTcub3JkZXItMS5tYi0zLm1iLWxnLTAKICAgICAgICAgICAgICBoNSBEZXNhcnJvbGxvIGNvZ25pdGl2bwogICAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvci5tcy0zCiAgICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTEwCiAgICAgICAgICAgICAgICAgIHAubWItMCBDYXBhY2lkYWQgcGFyYSByZXNvbHZlciBwcm9ibGVtYXMgc2VuY2lsbG9zIHkgdG9tYXIgZGVjaXNpb25lcyBiw6FzaWNhcy4KICAgICAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItMTAKICAgICAgICAgICAgICAgICAgcC5tYi0wIFJlY29ub2NpbWllbnRvIGRlIHBhdHJvbmVzLCBjb2xvcmVzLCBmb3JtYXMgeSB0YW1hw7Fvcy4KICAgICAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItMTAKICAgICAgICAgICAgICAgICAgcC5tYi0wIERlc2Fycm9sbG8gZGUgbGEgbWVtb3JpYSB5IGxhIGF0ZW5jacOzbiBzb3N0ZW5pZGEgZW4gYWN0aXZpZGFkZXMuCiAgICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTEwCiAgICAgICAgICAgICAgICAgIHAubWItMCBDYXBhY2lkYWQgZGUgY2xhc2lmaWNhciB5IG9yZ2FuaXphciBvYmpldG9zLCBzZWfDum4gY2FyYWN0ZXLDrXN0aWNhcyBlc3BlY8OtZmljYXMuCiAgICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTEwCiAgICAgICAgICAgICAgICAgIHAubWItMCBDb21wcmVuc2nDs24gZGUgY29uY2VwdG9zIGVzcGFjaWFsZXMgY29tbyAiZGVudHJvIiwgImZ1ZXJhIiwgImFycmliYSIgeSAiYWJham8iLgogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIucC00LnAtbWQtNQogICAgICAgICAgICAuY29sLWxnLTUub3JkZXItMgogICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvNi5wbmciKQogICAgICAgICAgICAuY29sLWxnLTcub3JkZXItMS5tYi0zLm1iLWxnLTAKICAgICAgICAgICAgICBoNSBEZXNhcnJvbGxvIG1vdG9yIChmaW5vIHkgZ3J1ZXNvKQogICAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvci5tcy0zCiAgICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTEwCiAgICAgICAgICAgICAgICAgIHAubWItMCBDb29yZGluYWNpw7NuIGVuIG1vdmltaWVudG9zIGNvbW8gc2FsdGFyLCBjb3JyZXIgeSB0cmVwYXIgKG1vdHJpY2lkYWQgZ3J1ZXNhKS4KICAgICAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItMTAKICAgICAgICAgICAgICAgICAgcC5tYi0wIFByZWNpc2nDs24gZW4gZWwgYWdhcnJlIGRlIGzDoXBpY2VzLCB0aWplcmFzIG8gcGVxdWXDsW9zIG9iamV0b3MgKG1vdHJpY2lkYWQgZmluYSkuCiAgICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTEwCiAgICAgICAgICAgICAgICAgIHAubWItMCBVc28gYWRlY3VhZG8gZGUgYW1iYXMgbWFub3MgcGFyYSBhY3RpdmlkYWRlcyBjb3RpZGlhbmFzLgogICAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci0xMAogICAgICAgICAgICAgICAgICBwLm1iLTAgTWVqb3JhIGVsIGVxdWlsaWJyaW8geSBsYSBjb29yZGluYWNpw7NuIGNvcnBvcmFsIGVuIGFjdGl2aWRhZGVzIGbDrXNpY2FzLgogICAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci0xMAogICAgICAgICAgICAgICAgICBwLm1iLTAgQ2FwYWNpZGFkIHBhcmEgcmVhbGl6YXIgbW92aW1pZW50b3MgY29udHJvbGFkb3MgeSBkaXJpZ2lkb3MuCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlci5wLTQucC1tZC01CiAgICAgICAgICAgIC5jb2wtbGctNS5vcmRlci0yCiAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi83LnBuZyIpCiAgICAgICAgICAgIC5jb2wtbGctNy5vcmRlci0xLm1iLTMubWItbGctMAogICAgICAgICAgICAgIGg1IERlc2Fycm9sbG8gZGVsIGxlbmd1YWplIHkgbGEgY29tdW5pY2FjacOzbgogICAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvci5tcy0zCiAgICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTEwCiAgICAgICAgICAgICAgICAgIHAubWItMCBDb21wcmVuc2nDs24geSB1c28gZGUgcGFsYWJyYXMgbnVldmFzIGVuIGRpZmVyZW50ZXMgY29udGV4dG9zLgogICAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci0xMAogICAgICAgICAgICAgICAgICBwLm1iLTAgUHJvZHVjY2nDs24gZGUgZnJhc2VzIG3DoXMgY29tcGxlamFzIGEgbWVkaWRhIHF1ZSBhdmFuemEgZW4gZWRhZC4KICAgICAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItMTAKICAgICAgICAgICAgICAgICAgcC5tYi0wIFVzbyBkZWwgbGVuZ3VhamUgcGFyYSBleHByZXNhciBuZWNlc2lkYWRlcywgZGVzZW9zIHkgZW1vY2lvbmVzLgogICAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci0xMAogICAgICAgICAgICAgICAgICBwLm1iLTAgQ2FwYWNpZGFkIGRlIHNlZ3VpciBpbnN0cnVjY2lvbmVzIHkgcmVzcG9uZGVyIHByZWd1bnRhcyBhZGVjdWFkYW1lbnRlLgogICAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci0xMAogICAgICAgICAgICAgICAgICBwLm1iLTAgRGVzYXJyb2xsbyBkZSBoYWJpbGlkYWRlcyBuYXJyYXRpdmFzIHkgY29udmVyc2FjacOzbiBjb24gcGFyZXMgeSBhZHVsdG9zLgogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIucC00LnAtbWQtNQogICAgICAgICAgICAuY29sLWxnLTUub3JkZXItMgogICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvOC5wbmciKQogICAgICAgICAgICAuY29sLWxnLTcub3JkZXItMS5tYi0zLm1iLWxnLTAKICAgICAgICAgICAgICBoNSBEZXNhcnJvbGxvIHNvY2lhbCB5IGVtb2Npb25hbAogICAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvci5tcy0zCiAgICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTEwCiAgICAgICAgICAgICAgICAgIHAubWItMCBJbnRlcmFjY2nDs24gY29uIG90cm9zIG5pw7FvcyB5IGFkdWx0b3MgZGUgbWFuZXJhIGFkZWN1YWRhLgogICAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci0xMAogICAgICAgICAgICAgICAgICBwLm1iLTAgRXhwcmVzacOzbiB5IHJlZ3VsYWNpw7NuIGRlIGVtb2Npb25lcyBlbiBkaWZlcmVudGVzIHNpdHVhY2lvbmVzLgogICAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci0xMAogICAgICAgICAgICAgICAgICBwLm1iLTAgUGFydGljaXBhY2nDs24gZW4ganVlZ29zIGNvbGFib3JhdGl2b3MgeSBhY3RpdmlkYWRlcyBncnVwYWxlcy4KICAgICAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItMTAKICAgICAgICAgICAgICAgICAgcC5tYi0wIERlc2Fycm9sbG8gZGUgZW1wYXTDrWEgeSBjb21wcmVuc2nDs24gZGUgbm9ybWFzIHNvY2lhbGVzLgogICAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci0xMAogICAgICAgICAgICAgICAgICBwLm1iLTAgQ2FwYWNpZGFkIHBhcmEgcmVzb2x2ZXIgY29uZmxpY3RvcyBjb24gZXN0cmF0ZWdpYXMgYWRhcHRhdGl2YXMuCgogICAgLmJnLWZ1bGwtd2lkdGguYmctY29sb3ItMTUubWItNQogICAgICAucHgtNC5weC1tZC01LnBiLW1kLTQucGItbGctMAogICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyLmp1c3RpZnktY29udGVudC1jZW50ZXIKICAgICAgICAgIC5jb2wtbWQtNi5jb2wtbGctMi5tYi0zLm1iLWxnLTAKICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvOS5zdmciLCBkYXRhLWFvcz0iem9vbS1pbiIpLm14LWF1dG8KICAgICAgICAgIC5jb2wtbGctMTAKICAgICAgICAgICAgaDIgUmVmbGV4aW9uZW1vczogCiAgICAgICAgICAgIHAubWItMCBFbCBhbsOhbGlzaXMgZGUgZXN0b3MgaW5kaWNhZG9yZXMgcGVybWl0ZSBjb21wcmVuZGVyIG1lam9yIGPDs21vIGVzdMOhIGF2YW56YW5kbyB1biBuacOxbyBlbiBzdSBkZXNhcnJvbGxvIHkgcXXDqSDDoXJlYXMgcmVxdWllcmVuIHVuIGFwb3lvIGFkaWNpb25hbC4gRXMgaW1wb3J0YW50ZSByZWNvcmRhciBxdWUgY2FkYSBuacOxbyB0aWVuZSBzdSBwcm9waW8gcml0bW8gZGUgYXByZW5kaXphamUsIHkgbGEgY2xhdmUgZXN0w6EgZW4gYnJpbmRhciBvcG9ydHVuaWRhZGVzIHF1ZSBmYXZvcmV6Y2FuIHN1IGNyZWNpbWllbnRvIGludGVncmFsLgogICAgCiAgICAjdF8yXzMudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICBoMiAjW3NwYW4gMi4zXSBSZWdpc3RybyB5IGFuw6FsaXNpcyBkZSBwcm9ncmVzb3MgZW4gbGEgZXN0aW11bGFjacOzbiB0ZW1wcmFuYQogICAgCiAgICBwLm1iLTQgRWwgc2VndWltaWVudG8gZGVsIGRlc2Fycm9sbG8gaW5mYW50aWwgZXMgdW4gcHJvY2VzbyBmdW5kYW1lbnRhbCBwYXJhIGV2YWx1YXIgbGEgZWZlY3RpdmlkYWQgZGUgbGFzIGVzdHJhdGVnaWFzIGRlIGVzdGltdWxhY2nDs24gdGVtcHJhbmEgeSByZWFsaXphciBhanVzdGVzIHF1ZSBmYXZvcmV6Y2FuIGVsIGFwcmVuZGl6YWplLiBVbiByZWdpc3RybyBzaXN0ZW3DoXRpY28gcGVybWl0ZSBpZGVudGlmaWNhciBhdmFuY2VzLCBkZXRlY3RhciBwb3NpYmxlcyBkaWZpY3VsdGFkZXMgeSBhZGFwdGFyIGxhcyBpbnRlcnZlbmNpb25lcyBwZWRhZ8OzZ2ljYXMgYSBsYXMgbmVjZXNpZGFkZXMgaW5kaXZpZHVhbGVzIGRlIGNhZGEgbmnDsW8uCgogICAgLmJnLWZ1bGwtd2lkdGguYmctY29sb3ItMS5tYi01CiAgICAgIC5weC00LnAtbWQtNQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctNy5tYi0zLm1iLWxnLTAKICAgICAgICAgICAgaDIubWItNChkYXRhLWFvcz0iZmxpcC11cCIpIFJlZ2lzdHJvIHkgYW7DoWxpc2lzIGRlIHByb2dyZXNvcyBlbiBsYSBlc3RpbXVsYWNpw7NuIHRlbXByYW5hCiAgICAgICAgICAgIHAubWItNChkYXRhLWFvcz0iZmFkZS1yaWdodCIpIEVuIGVsIFBERiBSZWdpc3RybyB5IGFuw6FsaXNpcyBkZSBwcm9ncmVzb3MgZW4gbGEgZXN0aW11bGFjacOzbiB0ZW1wcmFuYSwgc2UgZXhwbG9yYW4gZGlmZXJlbnRlcyBtw6l0b2RvcyBkZSBkb2N1bWVudGFjacOzbiwgY29tbyBsaXN0YXMgZGUgdmVyaWZpY2FjacOzbiwgcmVnaXN0cm9zIGFuZWNkw7N0aWNvcywgZXNjYWxhcyBkZSBkZXNhcnJvbGxvIHkgcG9ydGFmb2xpb3MgZGUgYXByZW5kaXphamUsIHByb3BvcmNpb25hbmRvIGhlcnJhbWllbnRhcyBwcsOhY3RpY2FzIHBhcmEgZXZhbHVhciBlbCBpbXBhY3RvIGRlIGxhIGVzdGltdWxhY2nDs24gZW4gZWwgYXVsYSB5IGVuIGVsIGhvZ2FyLiBBIHRyYXbDqXMgZGUgZXN0ZSBhbsOhbGlzaXMsIHNlIGJ1c2NhIGZvcnRhbGVjZXIgbGEgdG9tYSBkZSBkZWNpc2lvbmVzIHBlZGFnw7NnaWNhcyB5IGZvbWVudGFyIHVuIHRyYWJham8gY29sYWJvcmF0aXZvIGVudHJlIGRvY2VudGVzIHkgZmFtaWxpYXMsIGdhcmFudGl6YW5kbyB1biBhY29tcGHDsWFtaWVudG8gZWZlY3Rpdm8gZW4gZWwgcHJvY2VzbyBkZSBkZXNhcnJvbGxvIGluZmFudGlsLgogICAgCiAgICAgICAgICAgIGEuYW5leG8ubWItNC5iZy13aGl0ZS53LWZpdCg6aHJlZj0ib2J0ZW5lckxpbmsoJy9kb3dubG9hZHMvQW5leG9fNC5wZGYnKSIgdGFyZ2V0PSJfYmxhbmsiKShkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgICAgICAgICAgLmFuZXhvX19pY29ubyg6c3R5bGU9InsnYmFja2dyb3VuZC1jb2xvcic6ICcjRkNERkRCJ30iKQogICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvdGVtcGxhdGUvaWNvbm8tcGRmLnN2ZyIpCiAgICAgICAgICAgICAgLmFuZXhvX190ZXh0bwogICAgICAgICAgICAgICAgcCA8c3Ryb25nPkFuZXhvLiA8L3N0cm9uZz4gUmVnaXN0cm8geSBhbsOhbGlzaXMgZGUgcHJvZ3Jlc29zIGVuIGxhIGVzdGltdWxhY2nDs24gdGVtcHJhbmEuCiAgICAKICAgICAgICAgIC5jb2wtbGctNQogICAgICAgICAgICBmaWd1cmUoZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWEyLzEwLnBuZycsIGFsdD0nJykKCiAgICAjdF8yXzQudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICBoMiAjW3NwYW4gMi40XSBFc3RyYXRlZ2lhcyBkZSByZXRyb2FsaW1lbnRhY2nDs24gcGFyYSBtZWpvcmFyIGxhIGludGVydmVuY2nDs24gZWR1Y2F0aXZhCgogICAgLnJvdy5tYi01Lmp1c3RpZnktY29udGVudC1jZW50ZXIKICAgICAgLmNvbC1sZy0xMAogICAgICAgIHAgwr9Dw7NtbyBpbmZsdXllIGxhIHJldHJvYWxpbWVudGFjacOzbiBlbiBlbCBwcm9jZXNvIGRlIGFwcmVuZGl6YWplIHkgZGVzYXJyb2xsbyBpbmZhbnRpbD8KICAgICAgICAuYmctY29sb3ItMTYudGV4dC1jZW50ZXIucC00CiAgICAgICAgICBwLm1iLTAgwr9Dw7NtbyBpbmZsdXllIGxhIHJldHJvYWxpbWVudGFjacOzbiBlbiBlbCBwcm9jZXNvIGRlIGFwcmVuZGl6YWplIHkgZGVzYXJyb2xsbyBpbmZhbnRpbD8KCiAgICAgICAgZGl2LmJnLWNvbG9yLTQubWItMwogICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgICAuY29sLWxnLTgoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm9yZGVyLTIucC00CiAgICAgICAgICAgICAgcC5tYi0wIEVsIGFwcmVuZGl6YWplIGVzIHVuIHByb2Nlc28gZGluw6FtaWNvIGVuIGVsIHF1ZSBjYWRhIGV4cGVyaWVuY2lhIGRlamEgdW5hIGh1ZWxsYSBlbiBlbCBkZXNhcnJvbGxvIGRlbCBuacOxby4gU2luIGVtYmFyZ28sIHBhcmEgcXVlIGVzdGUgcHJvY2VzbyBzZWEgcmVhbG1lbnRlIHNpZ25pZmljYXRpdm8sIGVzIG5lY2VzYXJpbyBjb250YXIgY29uIGVzdHJhdGVnaWFzIGRlIHJldHJvYWxpbWVudGFjacOzbiBxdWUgcGVybWl0YW4gYWp1c3RhciwgZm9ydGFsZWNlciB5IG1lam9yYXIgbGEgaW50ZXJ2ZW5jacOzbiBlZHVjYXRpdmEuIExhIHJldHJvYWxpbWVudGFjacOzbiBubyBzb2xvIGJlbmVmaWNpYSBhIGxvcyBuacOxb3MsIHNpbm8gcXVlIHRhbWJpw6luIG9yaWVudGEgYSBkb2NlbnRlcyB5IGZhbWlsaWFzIGVuIGxhIHRvbWEgZGUgZGVjaXNpb25lcyBwZWRhZ8OzZ2ljYXMgKENlZGXDsW8geSBNb3lhLCAyMDE5KS4KICAgICAgICAgICAgLmNvbC1sZy00KGRhdGEtYW9zPSJ6b29tLWluIikub3JkZXItMS5tYi0zLm1iLWxnLTAKICAgICAgICAgICAgICBpbWcuaW1nLWZsdWlkKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTIvMTEuc3ZnJykKICAgICAgIAogICAgICAgIHAgQ3VhbmRvIGxhIHJldHJvYWxpbWVudGFjacOzbiBlcyBjbGFyYSwgb3BvcnR1bmEgeSBlc3BlY8OtZmljYSwgc2UgY29udmllcnRlIGVuIHVuIHB1ZW50ZSBlbnRyZSBsYSBldmFsdWFjacOzbiB5IGxhIG1lam9yYSBkZWwgYXByZW5kaXphamUuIFBlcm8sIMK/cXXDqSBlc3RyYXRlZ2lhcyBwdWVkZW4gcG90ZW5jaWFyIGVzdGUgcHJvY2VzbyBlbiBsYSBlc3RpbXVsYWNpw7NuIHRlbXByYW5hPwoKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWZvbmRvLXNsaWRlcgogICAgICAucC00LnAtbWQtNQogICAgICAgIFNseWRlckEodGlwbz0iYiIpLmJnLXdoaXRlCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlci5wLTQucC1tZC01CiAgICAgICAgICAgIC5jb2wtbGctNS5vcmRlci0yCiAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8xMi5wbmciKQogICAgICAgICAgICAuY29sLWxnLTcub3JkZXItMS5tYi0zLm1iLWxnLTAKICAgICAgICAgICAgICBoNSBSZXRyb2FsaW1lbnRhY2nDs24gZGVzY3JpcHRpdmEgeSBlc3BlY8OtZmljYQogICAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvci5tcy0zCiAgICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTEwCiAgICAgICAgICAgICAgICAgIHAubWItMCBQcm9wb3JjaW9uYSBpbmZvcm1hY2nDs24gZGV0YWxsYWRhIHNvYnJlIGxvcyBsb2dyb3MgeSBhc3BlY3RvcyBwb3IgbWVqb3Jhci4KICAgICAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItMTAKICAgICAgICAgICAgICAgICAgcC5tYi0wIEV2aXRhIGp1aWNpb3MgZ2VuZXJhbGVzIGNvbW8gImxvIGhpY2lzdGUgYmllbiIgeSBlbiBzdSBsdWdhciBvZnJlY2Ugb2JzZXJ2YWNpb25lcyBjb25jcmV0YXMsIGNvbW8gImxvZ3JhcyBlbmNhamFyIGxhcyBwaWV6YXMgZGVsIHJvbXBlY2FiZXphcyBwb3JxdWUgaWRlbnRpZmljYXN0ZSBsb3MgY29sb3JlcyB5IGxhcyBmb3JtYXMiLgogICAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci0xMAogICAgICAgICAgICAgICAgICBwLm1iLTAgRmF2b3JlY2UgbGEgY29tcHJlbnNpw7NuIGRlbCBwcm9jZXNvIGRlIGFwcmVuZGl6YWplIHkgbW90aXZhIGFsIG5pw7FvIGEgc2VndWlyIGV4cGxvcmFuZG8gbnVldmFzIGVzdHJhdGVnaWFzLgogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIucC00LnAtbWQtNQogICAgICAgICAgICAuY29sLWxnLTUub3JkZXItMgogICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvMTMucG5nIikKICAgICAgICAgICAgLmNvbC1sZy03Lm9yZGVyLTEubWItMy5tYi1sZy0wCiAgICAgICAgICAgICAgaDUgVXNvIGRlIGVzdHJhdGVnaWFzIHZpc3VhbGVzIHkgbWFuaXB1bGF0aXZhcwogICAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvci5tcy0zCiAgICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTEwCiAgICAgICAgICAgICAgICAgIHAubWItMCBVdGlsaXphciBwaWN0b2dyYW1hcywgZ3LDoWZpY29zIHkgdGFibGVyb3MgZGUgcHJvZ3Jlc28gZmFjaWxpdGEgbGEgY29tcHJlbnNpw7NuIGRlIGxvcyBhdmFuY2VzLgogICAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci0xMAogICAgICAgICAgICAgICAgICBwLm1iLTAgSW5jb3Jwb3JhciByZWN1cnNvcyBzZW5zb3JpYWxlcyBjb21vIGZpY2hhcyBkZSBjb2xvcmVzIG8gdGFyamV0YXMgZGUgbG9ncm9zIGhhY2UgcXVlIGxhIHJldHJvYWxpbWVudGFjacOzbiBzZWEgbcOhcyBhdHJhY3RpdmEgeSBzaWduaWZpY2F0aXZhLgogICAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci0xMAogICAgICAgICAgICAgICAgICBwLm1iLTAgUGVybWl0ZSBxdWUgbG9zIG5pw7FvcyBwYXJ0aWNpcGVuIGFjdGl2YW1lbnRlIGVuIGxhIGF1dG9ldmFsdWFjacOzbiB5IHJlY29ub2NpbWllbnRvIGRlIHN1cyBsb2dyb3MuCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlci5wLTQucC1tZC01CiAgICAgICAgICAgIC5jb2wtbGctNS5vcmRlci0yCiAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8xNC5wbmciKQogICAgICAgICAgICAuY29sLWxnLTcub3JkZXItMS5tYi0zLm1iLWxnLTAKICAgICAgICAgICAgICBoNSBFc3BhY2lvcyBkZSBkacOhbG9nbyBjb24gbGEgZmFtaWxpYQogICAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvci5tcy0zCiAgICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTEwCiAgICAgICAgICAgICAgICAgIHAubWItMCBNYW50ZW5lciB1bmEgY29tdW5pY2FjacOzbiBjb25zdGFudGUgY29uIGxhcyBmYW1pbGlhcyBheXVkYSBhIGFsaW5lYXIgZXN0cmF0ZWdpYXMgZGUgZXN0aW11bGFjacOzbiBlbiBjYXNhIHkgZW4gZWwgYXVsYS4KICAgICAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItMTAKICAgICAgICAgICAgICAgICAgcC5tYi0wIE9mcmVjZXIgcmVjb21lbmRhY2lvbmVzIGNvbmNyZXRhcyBzb2JyZSBjw7NtbyByZWZvcnphciBjaWVydG9zIGFwcmVuZGl6YWplcyBlbiBlbCBob2dhci4KICAgICAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItMTAKICAgICAgICAgICAgICAgICAgcC5tYi0wIEludm9sdWNyYXIgYSBsb3MgcGFkcmVzIGVuIGxhIGlkZW50aWZpY2FjacOzbiBkZSBhdmFuY2VzIHkgZGlmaWN1bHRhZGVzIHBlcm1pdGUgdW5hIGludGVydmVuY2nDs24gbcOhcyBlZmVjdGl2YS4KICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyLnAtNC5wLW1kLTUKICAgICAgICAgICAgLmNvbC1sZy01Lm9yZGVyLTIKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzE1LnBuZyIpCiAgICAgICAgICAgIC5jb2wtbGctNy5vcmRlci0xLm1iLTMubWItbGctMAogICAgICAgICAgICAgIGg1IFJlZm9yemFtaWVudG8gcG9zaXRpdm8geSBtb3RpdmFjacOzbgogICAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvci5tcy0zCiAgICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTEwCiAgICAgICAgICAgICAgICAgIHAubWItMCBEZXN0YWNhciBsb3MgYXZhbmNlcywgcG9yIHBlcXVlw7FvcyBxdWUgc2VhbiwgcmVmdWVyemEgbGEgY29uZmlhbnphIHkgbW90aXZhY2nDs24gZGVsIG5pw7FvLgogICAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci0xMAogICAgICAgICAgICAgICAgICBwLm1iLTAgVXRpbGl6YXIgZnJhc2VzIGFsZW50YWRvcmFzIHkgcmVjb25vY2VyIGVsIGVzZnVlcnpvIG3DoXMgYWxsw6EgZGVsIHJlc3VsdGFkbyBmaW5hbC4KICAgICAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItMTAKICAgICAgICAgICAgICAgICAgcC5tYi0wIEZvbWVudGFyIGVsIGd1c3RvIHBvciBlbCBhcHJlbmRpemFqZSBhIHRyYXbDqXMgZGUgZGVzYWbDrW9zIHByb2dyZXNpdm9zIHkgYWxjYW56YWJsZXMuCgogICAgLmJnLWZ1bGwtd2lkdGguYmctY29sb3ItNi5tYi01CiAgICAgIC5weC00LnB4LW1kLTUucGItbWQtNC5wYi1sZy0wCiAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAgICAgLmNvbC1tZC02LmNvbC1sZy0yLm1iLTMubWItbGctMAogICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8xNi5zdmciLCBkYXRhLWFvcz0iem9vbS1pbiIpLm14LWF1dG8KICAgICAgICAgIC5jb2wtbGctMTAudGV4dC13aGl0ZQogICAgICAgICAgICBoMiBSZWZsZXhpb25lbW9zOiAKICAgICAgICAgICAgcC5tYi0wIFNlZ8O6biBKYXVsaSAoMjAxMCksIGxhIHJldHJvYWxpbWVudGFjacOzbiBlcyB1bmEgaGVycmFtaWVudGEgcG9kZXJvc2EgcXVlIHBlcm1pdGUgdHJhbnNmb3JtYXIgbGEgZW5zZcOxYW56YSB5IG1lam9yYXIgbG9zIHByb2Nlc29zIGRlIGFwcmVuZGl6YWplIGVuIGxhIHByaW1lcmEgaW5mYW5jaWEuIE5vIHNlIHRyYXRhIHNvbG8gZGUgY29ycmVnaXIgZXJyb3Jlcywgc2lubyBkZSBndWlhciBhbCBuacOxbyBlbiBzdSBkZXNhcnJvbGxvLCBmb21lbnRhciBzdSBjb25maWFuemEgeSBwb3RlbmNpYXIgc3UgY3VyaW9zaWRhZC4KCiAgICAjdF8yXzUudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICBoMiAjW3NwYW4gMi41XSBFc3RyYXRlZ2lhcyBkZSBpbnRlcnZlbmNpw7NuIGFudGUgZGlmaWN1bHRhZGVzIGRldGVjdGFkYXMKICAgIAogICAgcC5tYi00IENhZGEgbmnDsW8gdGllbmUgdW4gcml0bW8gZGUgZGVzYXJyb2xsbyDDum5pY28sIHkgZW4gb2Nhc2lvbmVzIHB1ZWRlbiBzdXJnaXIgZGlmaWN1bHRhZGVzIGVuIMOhcmVhcyBjb21vIGVsIGxlbmd1YWplLCBsYSBtb3RyaWNpZGFkLCBsYSBzb2NpYWxpemFjacOzbiBvIGxhIHJlZ3VsYWNpw7NuIGVtb2Npb25hbC4gRGV0ZWN0YXIgZXN0b3MgZGVzYWbDrW9zIGEgdGllbXBvIHkgYXBsaWNhciBlc3RyYXRlZ2lhcyBkZSBpbnRlcnZlbmNpw7NuIGFkZWN1YWRhcyBlcyBjbGF2ZSBwYXJhIHByZXZlbmlyIHJlemFnb3MgeSBmb3J0YWxlY2VyIGVsIGFwcmVuZGl6YWplLgoKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWNvbG9yLTEubWItNQogICAgICAucHgtNC5wLW1kLTUKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAuY29sLWxnLTcubWItMy5tYi1sZy0wCiAgICAgICAgICAgIGgyLm1iLTQoZGF0YS1hb3M9ImZsaXAtdXAiKSBFc3RyYXRlZ2lhcyBkZSBpbnRlcnZlbmNpw7NuIGFudGUgZGlmaWN1bHRhZGVzIGRldGVjdGFkYXMgCiAgICAgICAgICAgIHAubWItNChkYXRhLWFvcz0iZmFkZS1yaWdodCIpIEVuIGVsIFBERiA8Yj5Fc3RyYXRlZ2lhcyBkZSBpbnRlcnZlbmNpw7NuIGFudGUgZGlmaWN1bHRhZGVzIGRldGVjdGFkYXM8L2I+LCBzZSBwcmVzZW50YW4gZW5mb3F1ZXMgcHLDoWN0aWNvcyBwYXJhIGxhIGlkZW50aWZpY2FjacOzbiB5IGFib3JkYWplIGRlIGVzdGFzIHNpdHVhY2lvbmVzLCBkZXN0YWNhbmRvIGxhIGltcG9ydGFuY2lhIGRlIGxhIG9ic2VydmFjacOzbiwgbGEgcGVyc29uYWxpemFjacOzbiBkZSBsYXMgZXN0cmF0ZWdpYXMgeSBlbCB0cmFiYWpvIGNvbGFib3JhdGl2byBjb24gbGEgZmFtaWxpYSB5IG90cm9zIHByb2Zlc2lvbmFsZXMuIEEgdHJhdsOpcyBkZSBtZXRvZG9sb2fDrWFzIGJhc2FkYXMgZW4gbGEgYWRhcHRhY2nDs24gZGUgYWN0aXZpZGFkZXMsIGVsIHVzbyBkZWwganVlZ28gY29tbyBoZXJyYW1pZW50YSBkZSBhcHJlbmRpemFqZSB5IGVsIG1vbml0b3JlbyBjb250aW51byBkZSBwcm9ncmVzb3MsIHNlIGJ1c2NhIGdhcmFudGl6YXIgdW4gYWNvbXBhw7FhbWllbnRvIGVmZWN0aXZvIHF1ZSBwb3RlbmNpZSBlbCBkZXNhcnJvbGxvIGludGVncmFsIGRlbCBuacOxbyB5IGxlIGJyaW5kZSBoZXJyYW1pZW50YXMgcGFyYSBzdXBlcmFyIHN1cyBkZXNhZsOtb3MuCiAgICAKICAgICAgICAgICAgYS5hbmV4by5tYi00LmJnLXdoaXRlLnctZml0KDpocmVmPSJvYnRlbmVyTGluaygnL2Rvd25sb2Fkcy9BbmV4b181LnBkZicpIiB0YXJnZXQ9Il9ibGFuayIpKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgICAgICAgICAuYW5leG9fX2ljb25vKDpzdHlsZT0ieydiYWNrZ3JvdW5kLWNvbG9yJzogJyNGQ0RGREInfSIpCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy90ZW1wbGF0ZS9pY29uby1wZGYuc3ZnIikKICAgICAgICAgICAgICAuYW5leG9fX3RleHRvCiAgICAgICAgICAgICAgICBwIDxzdHJvbmc+QW5leG8uIDwvc3Ryb25nPiBFc3RyYXRlZ2lhcyBkZSBpbnRlcnZlbmNpw7NuIGFudGUgZGlmaWN1bHRhZGVzIGRldGVjdGFkYXMgLgogICAgCiAgICAgICAgICAuY29sLWxnLTUKICAgICAgICAgICAgZmlndXJlKGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMi8xNy5wbmcnLCBhbHQ9JycpCiAgICAKICAgICN0XzJfNi50aXR1bG8tc2VndW5kbyhkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIGgyICNbc3BhbiAyLjZdIEVsYWJvcmFjacOzbiBkZSBpbmZvcm1lcyB5IGNvbXVuaWNhY2nDs24gY29uIGxhcyBmYW1pbGlhcwogICAgCiAgICBwLm1iLTQgTGEgY29tdW5pY2FjacOzbiBlZmVjdGl2YSBlbnRyZSBkb2NlbnRlcyB5IGZhbWlsaWFzIGVzIGNsYXZlIHBhcmEgZ2FyYW50aXphciB1biBhY29tcGHDsWFtaWVudG8gYWRlY3VhZG8gZW4gZWwgZGVzYXJyb2xsbyBpbmZhbnRpbC4gTcOhcyBhbGzDoSBkZSBsYSBvYnNlcnZhY2nDs24geSBldmFsdWFjacOzbiBkZWwgcHJvZ3Jlc28gZGUgbG9zIG5pw7FvcywgZXMgZnVuZGFtZW50YWwgcXVlIGxhIGluZm9ybWFjacOzbiByZWNvcGlsYWRhIHNlIHRyYWR1emNhIGVuIGVzdHJhdGVnaWFzIGNsYXJhcyB5IGFjY2VzaWJsZXMgcGFyYSBsb3MgY3VpZGFkb3Jlcy4KCiAgICAuYmctZnVsbC13aWR0aC5iZy1jb2xvci01Lm1iLTUKICAgICAgLnB4LTQucC1tZC01CiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgLmNvbC1sZy03Lm9yZGVyLTIKICAgICAgICAgICAgaDIubWItNChkYXRhLWFvcz0iZmxpcC11cCIpIEVsYWJvcmFjacOzbiBkZSBpbmZvcm1lcyB5IGNvbXVuaWNhY2nDs24gY29uIGxhcyBmYW1pbGlhcyAKICAgICAgICAgICAgcC5tYi00KGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikgRW4gZWwgUERGIDxiPkVsYWJvcmFjacOzbiBkZSBpbmZvcm1lcyB5IGNvbXVuaWNhY2nDs24gY29uIGxhcyBmYW1pbGlhczwvYj4sIHNlIHByZXNlbnRhbiBoZXJyYW1pZW50YXMgcGFyYSBlc3RydWN0dXJhciBpbmZvcm1lcyBkZSBtYW5lcmEgY2xhcmEgeSBvYmpldGl2YSwgZmFjaWxpdGFuZG8gbGEgY29tcHJlbnNpw7NuIGRlIGxvcyBhdmFuY2VzLCDDoXJlYXMgZGUgb3BvcnR1bmlkYWQgeSByZWNvbWVuZGFjaW9uZXMgcGVyc29uYWxpemFkYXMuIEFkZW3DoXMsIHNlIGRlc3RhY2FuIGVzdHJhdGVnaWFzIHBhcmEgZm9ydGFsZWNlciBlbCBkacOhbG9nbyBjb24gbGFzIGZhbWlsaWFzLCBwcm9tb3ZpZW5kbyB1biB0cmFiYWpvIGNvbGFib3JhdGl2byBxdWUgcG90ZW5jaWUgZWwgYXByZW5kaXphamUgeSBlbCBiaWVuZXN0YXIgZGUgbG9zIG5pw7FvcyBlbiBlbCBhdWxhIHkgZW4gZWwgaG9nYXIuCiAgICAKICAgICAgICAgICAgYS5hbmV4by5tYi00LmJnLXdoaXRlLnctZml0KDpocmVmPSJvYnRlbmVyTGluaygnL2Rvd25sb2Fkcy9BbmV4b182LnBkZicpIiB0YXJnZXQ9Il9ibGFuayIpKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgICAgICAgICAuYW5leG9fX2ljb25vKDpzdHlsZT0ieydiYWNrZ3JvdW5kLWNvbG9yJzogJyNGQ0RGREInfSIpCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy90ZW1wbGF0ZS9pY29uby1wZGYuc3ZnIikKICAgICAgICAgICAgICAuYW5leG9fX3RleHRvCiAgICAgICAgICAgICAgICBwIDxzdHJvbmc+QW5leG8uIDwvc3Ryb25nPiBFbGFib3JhY2nDs24gZGUgaW5mb3JtZXMgeSBjb211bmljYWNpw7NuIGNvbiBsYXMgZmFtaWxpYXMgLgogICAgCiAgICAgICAgICAuY29sLWxnLTUubWItMy5tYi1sZy0wLm9yZGVyLTEKICAgICAgICAgICAgZmlndXJlKGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMi8xOC5wbmcnLCBhbHQ9JycpCgogICAgLmJnLWZ1bGwtd2lkdGguYm9yZGVyLXRvcC5jb2xvci1wcmltYXJpbwogICAgICAucC00LnAtbWQtNQogICAgICAgIGgyKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBNQVRFUklBTCBDT01QTEVNRU5UQVJJTwogICAgICAgIC5yb3cubWF0ZXJpYWwtY29tcGxlbWVudGFyaW8KICAgICAgICAgIC5jb2wtMTIuY29sLW1kLTYuY29sLWxnLTcKICAgICAgICAgICAgcCBMb3MgaW52aXRhbW9zIGEgZXhwbG9yYXIgZWwgbWF0ZXJpYWwgY29tcGxlbWVudGFyaW8gZGUgZXN0ZSBjdXJzbywgZW4gZXN0YSBzZWNjacOzbiBlbmNvbnRyYXLDoSByZWN1cnNvcyBxdWUgbGUgcGVybWl0aXLDoW4gcHJvZnVuZGl6YXIgIHkgZW5yaXF1ZWNlciBzdSBhcHJlbmRpemFqZSBlbiBsb3MgdGVtYXMgdHJhdGFkb3MgZW4gZXN0YSB1bmlkYWQuCgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9saW5rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL2VsaWJyby5uZXQvZXMvbGMvdGVjbm9sb2dpY2FkZWxvcmllbnRlL3RpdHVsb3MvMTEzMTU5IiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgU2VycmFubywgUC4gKDIwMTkpLiBMYSBpbnRlZ3JhY2nDs24gc2Vuc29yaWFsIGVuIGVsIGRlc2Fycm9sbG8geSBhcHJlbmRpemFqZSBpbmZhbnRpbDogKCBlZC4pLiBOYXJjZWEgRWRpY2lvbmVzLiAKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbGluay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly9lbGlicm8ubmV0L2VzL2xjL3RlY25vbG9naWNhZGVsb3JpZW50ZS90aXR1bG9zLzExMzEzMiAiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBTdGFtbSwgSi4gKDIwMTgpLiBOZXVyb2NpZW5jaWEgaW5mYW50aWw6IGVsIGRlc2Fycm9sbG8gZGUgbGEgbWVudGUgeSBlbCBwb2RlciBkZWwgY2VyZWJybyBkZSAwIGEgNiBhw7FvczogKCBlZC4pLiBOYXJjZWEgRWRpY2lvbmVzLiAgCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL2xpbmsuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8vcmV2aXN0YS51bmliZS5lZHUucHkvaW5kZXgucGhwL3JjZWkvYXJ0aWNsZS92aWV3LzE4MS8wICIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIFBhY2hlY28sIEMuLCBTw6FuY2hleiwgQi4gQS4sICYgRWzDrWFzLCBSLiAoMjAxOCkuIEFib3JkYWplcyBlbiBsYSBldmFsdWFjacOzbiBkZWwgZGVzYXJyb2xsbyBpbmZhbnRpbCB0ZW1wcmFuby4gUmV2aXN0YSBDaWVudMOtZmljYSBFc3R1ZGlvcyBlIEludmVzdGlnYWNpb25lcywgNygxKSwgMjAwLTIxNi4gIAogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9saW5rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL2RvbWluaW9kZWxhc2NpZW5jaWFzLmNvbS9vanMvaW5kZXgucGhwL2VzL2FydGljbGUvdmlldy8yMDgxICIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIENhbXB1emFuby1Mw7NwZXosIEouIEcuLCBNZXJvLVBvbmNlLCBKLiBLLiwgWmFtYnJhbm8tWmFtYnJhbm8sIEouIFIuLCAmIFF1aXJvei1QYXJyYWxlcywgTC4gQS4gKDIwMjEpLiBMYSByZXRyb2FsaW1lbnRhY2nDs24gY29tbyBlc3RyYXRlZ2lhIHBhcmEgbWVqb3JhciBlbCBwcm9jZXNvIGRlIGVuc2XDsWFuemEtYXByZW5kaXphamUgZW4gbG9zIGVzdHVkaWFudGVzLiBEb21pbmlvIGRlIGxhcyBDaWVuY2lhcywgNyg0KSwgNTctNjkuICAKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbGluay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly9zY2llbG8uaXNjaWlpLmVzL3NjaWVsby5waHA/cGlkPVMxMTM5LTc2MzIyMDA5MDAwMTAwMDA1JnNjcmlwdD1zY2lfYXJ0dGV4dCAiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSDDgWx2YXJleiBHw7NtZXosIE0uIEouLCBTb3JpYSBBem5hciwgSi4sICYgR2FsYmUgU8OhbmNoZXotVmVudHVyYSwgSi4gKDIwMDkpLiBJbXBvcnRhbmNpYSBkZSBsYSB2aWdpbGFuY2lhIGRlbCBkZXNhcnJvbGxvIHBzaWNvbW90b3IgcG9yIGVsIHBlZGlhdHJhIGRlIEF0ZW5jacOzbiBQcmltYXJpYTogcmV2aXNpw7NuIGRlbCB0ZW1hIHkgZXhwZXJpZW5jaWEgZGUgc2VndWltaWVudG8gZW4gdW5hIGNvbnN1bHRhIGVuIE5hdmFycmEuIFBlZGlhdHLDrWEgQXRlbmNpw7NuIFByaW1hcmlhLCAxMSg0MSksIDY1LTg3LiAKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbGluay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly9ibG9ncy5pYWRiLm9yZy9kZXNhcnJvbGxvLWluZmFudGlsL2VzLzMtcHJvcHVlc3Rhcy1kZXNhcnJvbGxvLWluZmFudGlsLyAiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSAzIHByb3B1ZXN0YXMgcGFyYSBtZWRpciBlbCBkZXNhcnJvbGxvIGluZmFudGlsIC0gUHJpbWVyb3MgUGFzb3MuIChzLmYuLWMpLiBQcmltZXJvcyBQYXNvcy4gCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL2xpbmsuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8vYmxvZ3Mud29ybGRiYW5rLm9yZy9lcy9lZHVjYXRpb24vaGFjZXJsby1iaWVuLW1pZGllbmRvbG8tYmllbi1udWV2YXMtaGVycmFtaWVudGFzLWdsb2JhbGVzLXBhcmEtbWVkaXItZWwtZGVzYXJyb2xsbyAiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBIYWNlcmxvIGJpZW4gbWlkacOpbmRvbG8gYmllbjogTnVldmFzIGhlcnJhbWllbnRhcyBnbG9iYWxlcyBwYXJhIG1lZGlyIGVsIGRlc2Fycm9sbG8gaW5mYW50aWwgZW4gbG9zIGHDsW9zIHByZWVzY29sYXJlcy4gKHMuZi4pLiBCbG9ncyBkZWwgQmFuY28gTXVuZGlhbC4gCgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9pY29uby15dC5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj11UE4zSm1hZWVmdyAiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBDaGVsbyBTw6Fpei4gKDIwMTgsIDUgZGUgbm92aWVtYnJlKS4gQ3Vyc29fVUJVQWJpZXJ0YV9UZW1hXzIgW1ZpZGVvXS4gWW91VHViZS4gCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL3RlbXBsYXRlL2ljb25vLXl0LnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PWFLSjlCMGh0ZXRNIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgVXRvcMOtYXNFZHVjYXRpdmFzLiAoMjAxNiwgNiBkZSBqdW5pbykuIDIwMTZfQTFfNV9BdGVuY2lvbl9kaXZlcnNpZGFkX3Byb2dyYW1hX2NvZ25pdGl2YSBbVmlkZW9dLiBZb3VUdWJlLiAKCiAgICAgICAgICAuY29sLTEyLmNvbC1tZC02LmNvbC1sZy0zLm9mZnNldC1sZy0xCiAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL21hdGVyaWFsLWNvbXBsZW1lbnRhcmlvLnN2ZycsIGFsdD0nJykKCiAg"},null]}